## 쿠키와 세션

일반적으로 HTTP는 비 상태성 프로토콜이다.   
하지만, 서비스 제공자는 이용자에 맞춤화된 서비스를 제공하기를 원할 수 있다.   
이러한 상황에서 HTTP가 상태를 갖고있는것 처럼 행동하게 만들수 있는것이 세션과 쿠키이다.   
 
     

---
### 쿠키

#### 세션 쿠키와 지속쿠키

쿠키는 "세션 쿠키"와 "지속 쿠키"로 나뉜다.   
세션쿠키와 지속쿠키의 차이점은 파기되는 시점밖에없다. 쿠키에 파기일을 지정하지않으면, 이 쿠키는 세션 쿠키가 되고, 브라우저가 종료될때 같이 파기된다.      

#### 쿠키의 동작
- 쿠키 생성   
쿠키는 이름 = 값 형태원소를 리스트의 형태로 갖고있다. 사용자가 서버에 처음 접속하면, 서버는 사용자에 대한 아무런 정보도 갖고있지않다. 웹 서버는 사용자를 식별하기 위해, Set-Cookie와 같은 HTTP헤더로 사용자에게 전달된다.
```HTTP/1.1
HTTP/1.1 200 OK

Set-cookie: name="Devxb"; expires=Monday, 15-Nov-21 23:12:40 GMT
Content-type: image+xml/svg
Content-length: 1234
```

- 쿠키 전달
클라이언트가 서버에 요청을 보낼때는, 파기되지않은 쿠키들을 같이 보낸다.
```HTTP
GET /Devxb.svg HTTP/1.1
Host: www.devxb.com
Cookie: name="Devxb" age="22"
```

브라우저가 하나의 서버에 모든 쿠키를 전부 보낸다면, 성능문제와 개인정보 문제가 발생할수있기때문에,   
브라우저는 쿠키의 태그에따라 보낼쿠키와 보내지않을 쿠키를 구별하여 서버에 보낸다.
- 보통 자신을 생성한 서버에게만 쿠키를 전달한다.
- 쿠키 Domain속성과 Path속성에 따라 쿠키가 보내질 서버를 선택할 수 있다.
- secure값을 통해 보안프로토콜(TLS) 적용시에만 쿠키를 보낼수있게 설정할수있다.

아래는 서버에서 쿠키를 생성하여 브라우저(클라이언트)에 전달할때, 기술할 수 있는 domain, path, secure태그의 예시다.
```HTTP/1.1
HTTP/1.1 200 OK

Set-cookie: name="Devxb"; domain="devxb.com"; path="/cookie/" secure
Content-type: image+xml/svg;
Content-length: 1234;
```

---
### 세션
쿠키는 사용자의 브라우저에 저장되는반면, 세션은 서버에 저장되고 관리된다.     
서버에서 관리하기때문에, 보안적인 측면에서는 더 유리하나, 서버의 메모리에 저장되기때문에 많은 서버리소스를 사용한다는 단점이있다.

- 세션 생성
세션의 경우 서버구현에 따라, 생성하는 방식이다르다. 아래는 WAS로 Tomcat-Servlet(자바진영)을 사용할시 생성하는 방법이다.
```Java
session.setAttribute("name","Devxb");
session.getAttribute("name");
session.removeAttribute("name");
session.invalidate(); // 모든 세션을 삭제한다.
```

- 세션 파기
세션은 클라이언트가 브라우저를 종료하면 삭제되는것이 default지만, 서버 구현에따라 다르다.

